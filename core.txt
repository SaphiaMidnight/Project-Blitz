@name Tardis Personality Core
#@model models/bull/gates/processor.mdl
@model models/cheeze/wires/router.mdl
@inputs Console:wirelink Main_Keyboard:string FuelBoost:entity 
@outputs XYZ:vector Status:array 
@persist [Tardis Owner Interior Companion]:entity [TardisName PrimeChipActive HolographicChipActive]:string Dist Damage TardisPhase Phase Use Speed AutoLock LeakSealedSearch TardisPower 
@persist KeyUse Asked Booted Loop RSLoop Extrapolator_Shielding ShieldPower Fuel FuelAbsorb [EscapeVec TardisChatColor]:vector PersonalityActive
@persist Autospin SkinT Program1 EpDo PuDo DoOnce DoOnce2 DoOnce3 DoOnce4 DoOnce5 DoOnce6 DoOnce7 TardisHealth Fuel_Percent HologramsActive
@persist #[Companents]# Chronometric_Astrometer Red_Thermocouplings Manual_Navigations Isomorphic_Circuitry Fluid_Links Chameleon_Circuit 
@persist #[Components]# Blue_Thermocouplings Green_Thermocouplings Artron_Capacitor Forcefield_Generator 
@persist [Version WebVersion MOTD NewCode]:string Update VersionInfo:array Float Paradox Preserving Engaged
@trigger Main_Keyboard FuelBoost

##########################################################################################################################
#### CHIP DOES REQUIRE TARDIS REWRITE AND THE COPPER [2010/MATT SMITH] THEMED TARDIS ADDON EXTENTION TO IT FOR SOUNDS ####
##########################################################################################################################

#[ Chip Version ]#
Version = "v9"

#[ Tardis Exterior/Interior and Owner Definitions ]#
Tardis = entity():isConstrainedTo():tardisGet()
Interior = entity():isConstrainedTo()
Owner = Tardis:owner()

#[ Positioning ]#
OwnerInteriorDis = Owner:pos():distance(Interior:pos())
OwnerExteriorDis = Owner:pos():distance(Tardis:pos())
ExteriorDis = Tardis:pos():distance(Interior:pos())
InteriorP = Interior:pos()

#[ Toggles Chips ]#
if(Tardis:isValid() & Interior:isValid())
{
    PrimeChipActive = "true"
    PersonalityChipActive = "true"
    HolographicChipActive = "true"
}
else
{
    printColor(vec(255,0,0), "Chip is not connected to a Tardis, shutting down.")
}

if(clk("Check Updates"))
{
    #[ Version Check (SEND REQUEST) ]#
    if(httpCanRequest())
    {
        httpRequest("https://raw.githubusercontent.com/SaphiaMidnight/project-blitz/master/VERSION")
    }
}

if(PrimeChipActive == "true") 
{
    interval(60)
    runOnHTTP(1)
    runOnChat(1)

    LastSaid = Owner:lastSaid():lower():explode(" ")
    LastSaid1 = LastSaid:string(1)

#[ AutoUpdater First By: GrimKriegor, Redone for this chip by: Midnight Sapphire ]#
    #[ Version Check ]#
	   if (httpClk() & httpRequestUrl()=="https://raw.githubusercontent.com/SaphiaMidnight/project-blitz/master/VERSION")
    {
        VersionInfo=httpData():trim():explode(";")
    	   WebVersion=VersionInfo:string(1)
        MOTD=VersionInfo:string(2)
    
    	   if (Version!=WebVersion & WebVersion!="")
        {
            timer("versioncheck",7000)
        }
        if (MOTD!="")
        {
            timer("motd",20000)
        }
	   }
    if(clk("versioncheck"))
    {
        hint("Version ["+WebVersion+"] is avaliable on the web!",7) 
        timer("versioncheck2",2000)
    }
    if(clk("versioncheck2"))
    {
        hint("Type !update to update from ["+Version+"] to ["+WebVersion+"]",7)
    }
    if(clk("motd"))
    {
        hint("Message from Sapphie: "+MOTD,7) , entity():soundPlay(1,0,"ui/buttonrollover.wav")
    }
    ## Chat Triggers ---------------------------------------------
    if (chatClk(Owner))
    {
    #Updater & Related --------------------------------------------------
        if (LastSaid1 == "!update")
        {
            hideChat(1)
            timer("update",10000)
            hint("Attempting update to version ["+WebVersion+"]",5) 
            entity():soundPlay(1,0,"buttons/button9.wav")
        }
    }
    #Updater Code -----------------------------------------------------------------
    if (clk("update"))
    { 
        if(httpCanRequest())
        {
            httpRequest("https://raw.githubusercontent.com/SaphiaMidnight/project-blitz/master/core.txt")
        }
        else
        {
            hint("ERROR! Can't reach the address!",5) , entity():soundPlay(1,0,"buttons/weapon_cant_buy.wav")
        }
    }

    if (httpClk() & httpRequestUrl()=="https://raw.githubusercontent.com/SaphiaMidnight/project-blitz/master/core.txt")
    {
        NewCode=httpData():trim():explode(VersionInfo:string(3)):string(1)

        if(fileCanWrite() & NewCode!="")
        {
            fileWrite(">e2shared/"+"Tardis_Personality_Core_"+WebVersion+".txt", NewCode)
            hint("The new code was saved on [ e2shared/Tardis_Personality_Core_"+WebVersion+".txt ]",7)
            entity():soundPlay(1,0,"buttons/bell1.wav")
        }
        else
        {
            hint("ERROR! Can't Write the File!",5) , entity():soundPlay(1,0,"buttons/weapon_cant_buy.wav")
        }
    }






#[ Continue Timers ]#

    timer("use", 100)    

#[ Variables ]#

    if(Tardis:tardisPilot():isValid())
    {
        TardisName = Tardis:tardisPilot():name()
    }
    else
    {
        TardisName = "Crimson"
    }
    
    Speed = Tardis:vel():length()
    Tardis:createWire(entity(),"XYZ","XYZ")
    T = round(random(1,1000))
    Extrapolator_Shielding = 1
    Use = owner():keyUse()
    if(isSinglePlayer() == 0)
    {
        findByClass("player")
        findExcludePlayer(Owner)
        findExcludeEntity(Companion)
        Player = findResult(1)
        Dist2 = Player:pos():distance(Tardis:pos())
    }
    
#[ Arrays ]#
    
    Component = array(Fluid_Links, Manual_Navigations, Red_Thermocouplings, Blue_Thermocouplings, Green_Thermocouplings, Chronometric_Astrometer, Isomorphic_Circuitry, Chameleon_Circuit, Artron_Capacitor, Forcefield_Generator)
    Players = array(players(), playersAdmins(), playersSuperAdmins())
    Companions = array(Owner:steamFriends())
    Status = array(TardisHealth, Owner:health(), numPlayers(), hostname(), Fuel_Percent, ShieldPower, HologramsActive, Extrapolator_Shielding, TardisName, TardisChatColor, Preserving, Engaged)
    
#[ Start of the code ]#
    if(first()) 
    {   
        TardisChatColor = vec(255,0,0)
        EscapeVec = round(Tardis:pos())
        EscapeAng = round(Tardis:angles())
        TardisHealth = Tardis:tardisHealth()
        
        Fluid_Links = 100
        Manual_Navigations = 100
        Red_Thermocouplings = 100
        Blue_Thermocouplings = 100
        Green_Thermocouplings = 100
        Chronometric_Astrometer = 100
        Isomorphic_Circuitry = 100
        Chameleon_Circuit = 100
        Artron_Capacitor = 100
        Forcefield_Generator = 100
        
        Fuel = 100
        FuelAbsorb = 255
        LeakSealedSearch = 0
        AutoLocks = 0
        TardisPower = 1
        Engaged = 0 #[ Tardis Personallity Extension Chip Control ]#
        PersonalityActive = 0 #[ Tardis Personallity Extension Chip Control ]#
        Float = 0
        Asked = 0
        SkinT = 1
        Phase = 0
        KeyUse = 0
        DoOnce = 0
        DoOnce2 = 0
        DoOnce3 = 0
        DoOnce4 = 0
        DoOnce5 = 0
        DoOnce6 = 0
        DoOnce7 = 0
        EpDo = 0
        PuDo = 0
        Program1 = 0
        Paradox = 0
        Loop = 1
        RSLoop = 1
        Tardis_Code = "H5C?W#3E*" #Who knows what this is for? ;)
        ShieldPower = 255
        
        HologramsActive = 0
        Tardis:setBodygroup(1,1)
        timer("Reset",1000)
        timer("Tardis Reboot", 1500)
        setName(""+Owner:name()+"'s Tardis Personallity: "+TardisName+""), hint("Chip made by: Saphia Midnight",20)
        
    #[ Wishing Happy Birthday ]#
        if(round(time("month")) == 9 & round(time("day")) == 17) #Change to your liking or just remove, your call.
        {
            Interior:soundPlay(100,0,"taunts/makeawish.mp3")
            Owner:soundPlay(100,0,"taunts/makeawish.mp3")
            printColor(TardisChatColor,TardisName+": Happy Birthday!!")
        }

    #[ Refueling Effect ]#
        holoCreate(1)
        holoModel(1,"models/effects/portalfunnel.mdl")
        holoPos(1,Tardis:pos()+vec(0,0,100))
        holoAng(1,Tardis:toWorld(ang(0,0,0)))
        holoAlpha(1,0)
        holoParent(1,Tardis)
    
    #[ Open Rift ]#
        holoCreate(2)
        holoModel(2,"models/props_combine/Combine_citadelcloud003.mdl")
        holoPos(2,Tardis:pos()+vec(0,0,2200))
        holoAng(2,Tardis:toWorld(ang(0,0,0)))
        holoAlpha(2,0)
        holoParent(2,Tardis)
    
        holoCreate(5)
        holoModel(5,"models/props_combine/Combine_citadelcloudcenter.mdl")
        holoPos(5,Tardis:pos()+vec(0,0,2200))
        holoAng(5,Tardis:toWorld(ang(0,0,0)))
        holoAlpha(5,0)
        holoParent(5,Tardis)
    
    #[ Beam ]#
        holoCreate(4)
        holoModel(4,"models/props_combine/combine_citadelbeacon.mdl")
        holoPos(4,Tardis:pos()+vec(0,0,1760))
        holoAng(4,Tardis:toWorld(ang(0,0,180)))
        holoScale(4,vec(1,1,0.62))
        holoAlpha(4,0)
        holoParent(4,Tardis)

    }

#[ Starting Timers ]#
    
    if(clk("Tardis Reboot")) 
    {
        printColor(TardisChatColor,""+TardisName+": Shutting down for rebooting Tardis systems.. This may take time..")
        Tardis:tardisPower()
        TardisPower = 0
        Interior:soundPlay(1,0,"doctorwho1200/copper/rewrite/powerdown.wav")
        timer("Boot", 20000)
        hint("You may now wire the extensions to the primary chip while things are getting started",10)
    }
    if(TardisPower != 1 && Tardis:tardisPowered() == 1)
    {
        hint("Power systems offline until restart is complete.",5)
        Tardis:tardisPower()
    }
    if(clk("Boot"))
    {
        printColor(TardisChatColor,""+TardisName+": Primary systems booted. Just a biiit longer, booting secondary systems...")
        Interior:soundPlay(104,0,"doctorwho1200/copper/rewrite/accelerator.wav")
        timer("Secondary", 8000)
    }
    if(clk("Secondary"))
    {
        Booted = 1
        TardisPower = 1
        printColor(TardisChatColor,""+TardisName+": Tardis secondary systems booted. You may now restart the console. Scanning for server name...")
        Interior:soundPlay(105,0,"doctorwho1200/copper/rewrite/bell.wav")
        timer("Holograms", 2000)
        timer("Singleplayer?", 4000)
        timer("Auto Door Locks?", 8000)
    }
    if(clk("Singleplayer?")) 
    {
        if(isSinglePlayer()) 
        {
            printColor(TardisChatColor,""+TardisName+": Ah, just me and you. Just how I like it.")
        }
        else
        {
            printColor(TardisChatColor,""+TardisName+": We are in the "+Status[4,string]+" server. Please keep me safe. Don't do something stupid... or let anyone but your companions touch me.")
            entity():setAlpha(0)
        }
    }
    
#[ Hologramphic Program Engage (SEPERATE CHIP) ]#
    
    if(clk("Holograms") && HolographicChipActive == "true") 
    {
        printColor(TardisChatColor,""+TardisName+": Holographic Systems Online.")
        HologramsActive = 1
    }
    elseif(HolographicChipActive != "true")
    {
        printColor(TardisChatColor,""+TardisName+": Holographic Systems unable to boot. Extension setting not 'true'.")
    }

    if(Booted == 1)
    {
    #[ Tardis Auto lock & Tardis Auto Isomorphics ]#
        
        if(Tardis:tardisMoving()) 
        {
            if(Tardis:tardisLocked() == 0)
            {
                Tardis:tardisLock()
            }
        }
        
        if(Status[3,number] > 1 && Owner:pos():distance(Interior:pos()) > 800) 
        {
            if(Tardis:tardisIsomorph() == 0) 
            {
                Tardis:tardisIsomorphic()
            }
        }
        
    #[ Tardis Keys ]#
        
        if(clk("use"))
        {
            if(owner():keyReload())
            {
                if(owner():aimEntity() == Tardis && Owner:pos():distance(Tardis:pos()) < 68 && Owner != Tardis:tardisPilot())
                {
                    timer("Insert key",500)
                }
            }
        }
        if(clk("use"))
        {
            if(owner():keyUse())
            {
                if(owner():aimEntity() == Tardis && Owner:pos():distance(Tardis:pos()) < 68 && Owner != Tardis:tardisPilot())
                {
                    timer("Locked door",100)
                }
            }
        }
        
        if(clk("Locked door"))
        {
            if(Tardis:tardisLocked())
            {
                Tardis:soundPlay(105,0,"doors/door_lock_1.wav")
                printColor(TardisChatColor,""+TardisName+": Doors are locked, silly.")
            }
        }
        
        if(clk("Insert key"))
        {
            Tardis:soundPlay(2,0,"weapons/ar2/npc_ar2_reload.wav")
            
            if(Tardis:tardisLocked())
            {
                timer("Key unlock",2850)
            }
            else
            {
                timer("Key lock",2850)
            }
        }
        if(clk("Key unlock"))
        {
            printColor(TardisChatColor,""+TardisName+": Doors unlocked using key.")
            Tardis:tardisLock()
        }
        
        if(clk("Key lock"))
        {
            if(Tardis:tardisPowered() == 1)
            {
                printColor(TardisChatColor,""+TardisName+": Doors locked using key.")
                Tardis:tardisLock()
            }
            else
            {
                printColor(TardisChatColor,""+TardisName+": Door lock nonfunctional without power.")
                Tardis:soundPlay(3,0,"doctorwho1200/copper/rewrite/error.wav")
                Interior:soundPlay(4,0,"doctorwho1200/copper/rewrite/error.wav")
            }
        }
            
    #[ Fueling System ]#
        
        function artron() 
        {
            Fuel_Percent = round(Fuel)
            if(Fuel > 0) 
            {
                if(Main_Keyboard == "Dump Fuel" && Fuel > 0)
                {
                    Fuel = 0
                }
                if(Tardis:tardisPowered()) 
                {
                    Fuel -= 0.0001
                    Artron_Capacitor -= 0.0001
                }
                elseif(Tardis:tardisInVortex() && Tardis:tardisMoving()) 
                {
                    Fuel -= 0.0025
                    Artron_Capacitor -= 0.0055
                }
                elseif(Tardis:tardisMoving() && Tardis:tardisLongflighted()==0) 
                {
                    Fuel -= 0.0015
                    Artron_Capacitor -= 0.004
                }
                elseif(Tardis:tardisVisible()==0 && Tardis:tardisPowered()) 
                {
                    Fuel -= 0.0040
                    Artron_Capacitor -= 0.006
                }
                elseif(Tardis:tardisFlying() && Tardis:tardisPowered()) 
                {
                    Fuel -= 0.0010
                    Artron_Capacitor -= 0.002
                }
                elseif(Tardis:tardisPowered() == 0 && Fuel_Percent < 100 && Tardis:tardisIsHADS() && Artron_Capacitor > 0) 
                {
                    Fuel += 0.020
                    Artron_Capacitor -= 0.003
                    holoAlpha(1,255)
                    holoAlpha(2,255)
                    holoAlpha(5,255)
                    holoAlpha(4,255)
                    if(DoOnce6 == 0)
                    {
                        Tardis:soundPlay(104,0,"ambient/atmosphere/city_beacon_loop1.wav")
                        DoOnce6 = 1
                    }
                }
                elseif(Tardis:tardisPowered() || Tardis:tardisIsHADS() == 0 || Fuel_Percent > 99)
                {
                    holoAlpha(1,0)
                    holoAlpha(2,0)
                    holoAlpha(5,0)
                    holoAlpha(4,0)
                    DoOnce6 = 0
                }
            }
                        
            if(Fuel_Percent == 0 && Tardis:tardisPowered() || Artron_Capacitor <= 1) 
            {
                Tardis:tardisPower()
            }
            if(Fuel_Percent == 0 && Tardis:tardisInVortex() && Extrapolator_Shielding == 1) 
            {
                if(DoOnce5 == 0)
                {
                    printColor(TardisChatColor,""+TardisName+": Artron fuel cells are empty! Shields have failed!")
                    DoOnce5 = 1
                }
                Extrapolator_Shielding = 0           
            }
            elseif(Forcefield_Generator <= 1) 
            {
                Extrapolator_Shielding = 0
            }
        
            if(Fuel_Percent >= 99 && Tardis:tardisPowered() == 0 && ShieldPower < 255 && Forcefield_Generator > 0) 
            {
                ShieldPower += 1
            }
            if(Fuel_Percent < 100 && FuelBoost:isValid() && Tardis:tardisIsHADS() && Tardis:tardisPowered() == 0) 
            {
                FuelAbsorb -= 1
                FuelBoost:setAlpha(FuelAbsorb)
            }
            if(FuelAbsorb == 0)
            {
                FuelBoost:propDelete()
                if(FuelBoost:isValid() == 0 && Fuel_Percent < 1 && Main_Keyboard != "Dump Fuel")
                {
                    Tardis:soundPlay(102,0,"doctorwho1200/copper/boringer.wav")
                    Interior:soundPlay(103,0,"doctorwho1200/copper/boringer.wav")
                    FuelAbsorb = 255
                    Fuel += 1
                }
            }
            if(Tardis:tardisHealth() <= 10)
            {
                LeakSealedSearch = 1
                if(Fuel > 0)
                {
                    Fuel -= 0.03
                }
                if(DoOnce3 == 0)
                {
                    printColor(TardisChatColor,""+TardisName+": Fuel cells are busted! I'm leaking fuel due to damage!")
                    DoOnce3 = 1
                }
            }
            if(LeakSealedSearch == 1)
            {
                if(Tardis:tardisHealth() > 10)
                {
                    LeakSealedSearch = 0
                    if(DoOnce3 == 1)
                    {
                        printColor(TardisChatColor,""+TardisName+": Fuel cells repaired and are no longer leaking fuel... Phew..")
                        DoOnce3 = 0
                    }
                }
            }
            if(Fuel_Percent == 0 && Tardis:tardisMoving() == 0)
            {
                if(DoOnce4 == 0)
                {
                    printColor(TardisChatColor,""+TardisName+": Fuel cells depleted, shutting down.")
                    DoOnce4 = 1
                }
            }
            else
            {
                DoOnce4 = 0
            }
        }
artron()
        
    #[ Hitting Debris ]#
        
        if(ShieldPower > 0 && Fuel > 0 && Forcefield_Generator > 0) 
        {
            Extrapolator_Shielding = 1
        }
        else
        {
            Extrapolator_Shielding = 0
        }
        
        if(T == 24) 
        {
            if(Tardis:tardisInVortex() == 1) 
            {
                if(Extrapolator_Shielding == 1) 
                {
                    Interior:soundPlay(4,0,"stargate/iris/hit.mp3")
                    Forcefield_Generator -= 0.001
                    ShieldPower-=1
                }
            }
        }
        elseif(T == 25) 
        { 
            if(Tardis:tardisInVortex() == 1) 
            {
                if(Extrapolator_Shielding == 0) 
                {
                    Interior:soundPlay(5,0,"doctorwho1200/copper/rewrite/explosion.wav")
                    Debris = propSpawn("models/props_c17/oildrum001_explosive.mdl",Interior:pos()+vec(0,0,150),ang(0,0,0),1)
                    Debris:setAlpha(0)
                    Debris:propBreak()
                    printColor(TardisChatColor,""+TardisName+": Small Debris Impact, hull taking light Damage!")
                }
            }
        }
        elseif(T == 26) 
        {
            if(Tardis:tardisInVortex() == 1) 
            {
                if(Extrapolator_Shielding == 1) 
                {
                    Interior:soundPlay(4,0,"stargate/iris/hit_2.mp3")
                    Forcefield_Generator -= 0.003
                    ShieldPower-=2
                }
            }
        }
        elseif(T == 27) 
        { 
            if(Tardis:tardisInVortex() == 1) 
            {
                if(Extrapolator_Shielding == 0) 
                {
                    Interior:soundPlay(5,0,"doctorwho1200/copper/rewrite/explosion.wav")
                    Debris = propSpawn("models/props_c17/oildrum001_explosive.mdl",Interior:pos()+vec(0,0,150),ang(0,0,0),1)
                    Debris:setAlpha(0)
                    Debris:propBreak()
                    printColor(TardisChatColor,""+TardisName+": Small Debris Impact, hull taking light Damage!")
                }
            }
        }
        elseif(T == 28) 
        {
            if(Tardis:tardisInVortex() == 1) 
            {
                if(Extrapolator_Shielding == 1) 
                {
                    Interior:soundPlay(4,0,"stargate/iris/hit_3.mp3")
                    Forcefield_Generator -= 0.004
                    ShieldPower-=2
                }
            }
        }
        elseif(T == 29) 
        { 
            if(Tardis:tardisInVortex() == 1) 
            {
                if(Extrapolator_Shielding == 0) 
                {
                    Interior:soundPlay(5,0,"doctorwho1200/copper/rewrite/explosion.wav")
                    Debris = propSpawn("models/props_c17/oildrum001_explosive.mdl",Interior:pos()+vec(0,0,150),ang(0,0,0),1)
                    Debris:setAlpha(0)
                    Debris:propBreak()
                    printColor(TardisChatColor,""+TardisName+": Small/Fast Debris Impact, hull taking some Damage!")
                }
            }
        }
        elseif(T == 30) 
        {
            if(Tardis:tardisInVortex() == 1) 
            {
                if(Extrapolator_Shielding == 1) 
                {
                    Interior:soundPlay(4,0,"stargate/iris/hit_4.mp3")
                    Forcefield_Generator -= 0.006
                    ShieldPower-=4
                }
            }
        }
        elseif(T == 31) 
        { 
            if(Tardis:tardisInVortex() == 1) 
            {
                if(Extrapolator_Shielding == 0) 
                {
                    Interior:soundPlay(5,0,"doctorwho1200/copper/rewrite/explosion.wav")
                    Debris = propSpawn("models/props_c17/oildrum001_explosive.mdl",Interior:pos()+vec(0,0,150),ang(0,0,0),1)
                    Debris2 = propSpawn("models/props_c17/oildrum001_explosive.mdl",Interior:pos()+vec(0,0,100),ang(0,0,0),1)
                    Debris3 = propSpawn("models/props_c17/oildrum001_explosive.mdl",Interior:pos()+vec(0,0,50),ang(0,0,0),1)
                    
                    Debris:setAlpha(0)
                    Debris2:setAlpha(0)
                    Debris2:setAlpha(0)
                    
                    Debris:propBreak()
                    Debris2:propBreak()
                    Debris3:propBreak()
                    printColor(TardisChatColor,""+TardisName+": Large Debris Impact, hull taking severe Damage!")
                }
            }
        }
        
    #[ Tardis Paradoxes ]#
        if(T == 31 && Tardis:tardisInVortex() && Paradox == 0)
        {
            printColor(TardisChatColor,""+TardisName+": Paradox! Attempting to counteract it.")
            Interior:soundPlay(5,0,"doctorwho1200/copper/rewrite/error.wav")
            timer("Paradox avoid",10000)
            Paradox = 1
        }
        if(T == 32 && Tardis:tardisInVortex() && Paradox == 1)
        {
            stoptimer("Paradox avoid")
            printColor(TardisChatColor,""+TardisName+": Counteraction success.")
            Paradox = 0
        }
        if(clk("Paradox avoid") && Paradox == 1)
        {
            printColor(TardisChatColor,""+TardisName+": Unable to counteract, taking damage!")
            Interior:soundPlay(5,0,"doctorwho1200/copper/rewrite/explosion.wav")
            Debris = propSpawn("models/props_c17/oildrum001_explosive.mdl",Interior:pos()+vec(0,0,150),ang(0,0,0),1)
            Debris2 = propSpawn("models/props_c17/oildrum001_explosive.mdl",Interior:pos()+vec(0,0,100),ang(0,0,0),1)
            Debris3 = propSpawn("models/props_c17/oildrum001_explosive.mdl",Interior:pos()+vec(0,0,50),ang(0,0,0),1)
            
            Debris:setAlpha(0)
            Debris2:setAlpha(0)
            Debris2:setAlpha(0)
            
            Debris:propBreak()
            Debris2:propBreak()
            Debris3:propBreak()
            Paradox = 0
        }
        
    #[ Tardis extra damage effects ]#
        
        if(T == 100) 
        {
            if(Status[1,number] < 1)
            {
                Debris4 = propSpawn("models/props_junk/propane_tank001a.mdl",Interior:pos()+vec(0,0,0),ang(0,0,0),1)
                Debris4:setAlpha(0)
                Debris4:propBreak()
            }
        }
        
        if(T == 101) 
        {
            if(Status[1,number] < 1) 
            {
                Debris4 = propSpawn("models/props_junk/propane_tank001a.mdl",Interior:pos()+vec(0,0,0),ang(0,0,0),1)
                Debris4:setAlpha(0)
                Debris4:propBreak()
            }
        }
        #[ Deep Interior Explosions ]#
        if(T == 200 || T == 400)
        {
            if(Status[1,number] < 1)
            {
                Interior:soundPlay(6,0,"ambient/explosions/exp1.wav")
            }
        }
        elseif(T == 201 || T == 300)
        {
            if(Status[1,number] < 1)
            {
                Interior:soundPlay(6,0,"ambient/explosions/exp2.wav")
            }
        }
        elseif(T == 202 || T == 500)
        {
            if(Status[1,number] < 1)
            {
                Interior:soundPlay(6,0,"ambient/explosions/exp3.wav")
            }
        }
        
    
    #[ Interior Landing & No Pilot Landing ]#
        
        if(Tardis:tardisInVortex() && OwnerInteriorDis > 800) 
        {
            timer("No Pilot",15000)
        }
        else
        {
            stoptimer("No Pilot")
        }
        
        if(clk("No Pilot")) 
        {
            Tardis:tardisMaterialise()
        }
    
    #[ Keyboard Inputs ]#
    
        if(ExteriorDis > 800 && Main_Keyboard== "Amy Pond" && Tardis:tardisIsHADS() && Tardis:tardisPhyslocked() && Tardis:tardisPowered()) 
        { 
            if(Tardis:tardisMoving() == 0 && Tardis:tardisLongflighted() == 0 && Tardis:tardisIsomorphic() && Tardis:tardisLocked()) 
            {
                Tardis:tardisDemat(InteriorP+vec(340,200,-75),ang(0,180,0))
                printColor(TardisChatColor,""+TardisName+": Navigations Error, relocating to safest place!")
            }
        }
        
        if(Main_Keyboard== "Wibbly Lever" && Tardis:tardisPhyslocked() && Tardis:tardisPowered() && Tardis:tardisMoving() == 0 && ExteriorDis < 800) 
        {
            printColor(TardisChatColor,""+TardisName+": As the Doctor said, The Wibbly Lever!")
            Tardis:tardisFastReturn()
        }
        
        if(Main_Keyboard == "Have fun.") 
        {
            if(PersonalityChipActive == "true")
            {
                if(Engaged != 1 && PersonalityActive == 0)
                {
                    printColor(TardisChatColor,""+TardisName+": Yay! My own control! Thank you!")
                    Engaged = 1
                    PersonalityActive = 1
                }
            }
            else
            {
                hint("Personality extention not enabled. Enable at start of code.",10)
            }
        }
        if(Main_Keyboard == "My turn.")
        {
            if(Engaged != 0 && PersonalityActive == 1)
            {
                printColor(TardisChatColor,""+TardisName+": Aww, okay.")
                Engaged = 0
                PersonalityActive = 0
            }
        }
        if(Main_Keyboard == "Monitor yourself.")
        {
            if(Preserving != 1)
            {
                printColor(TardisChatColor,""+TardisName+": Oh, of course.")
                Preserving = 1
            }
        }
        if(Main_Keyboard == "Trust me.")
        {
            if(Preserving != 0)
            {
                printColor(TardisChatColor,""+TardisName+": As long as I don't blow up.")
                Preserving = 0
            }
        }

    #[ Random Skin Upon Auto-Repair ]#
        
        if(Tardis:tardisSelfrepairing()) 
        {
            SkinT = round(random(0,3))
        }
        if(Tardis:tardisSelfrepairing() == 0) 
        {
            if(SkinT == 0) 
            {
                Tardis:setSkin(0)
            }
        }
        if(Tardis:tardisSelfrepairing() == 0) 
        {
            if(SkinT == 1) 
            {
                Tardis:setSkin(1)
            }
        }
        if(Tardis:tardisSelfrepairing() == 0) 
        {
            if(SkinT == 2) 
            {
                Tardis:setSkin(2)
            }
        }
        if(Tardis:tardisSelfrepairing() == 0) 
        {
            if(SkinT == 3) 
            {
                Tardis:setSkin(3)
            }
        }
        
    #[ Power lit sign ]#
        
        if(Tardis:tardisPowered()) 
        {
            Tardis:setBodygroup(2,1)
        }
        
        if(Tardis:tardisPowered() == 0) 
        {
            Tardis:setBodygroup(2,0)
        }
        
    #[ Owner Hologram ]#
        
        if(OwnerInteriorDis > 800) 
        {
            holoAlpha(3,200)
        }
        else
        {
            holoAlpha(3,0)
        }
        
    #[ Curiosity Circuts ]#
            
        if(Tardis:tardisInVortex()) 
        {
            timer("Land",120000)
        }
        else
        {
            stoptimer("Land")
        }
        
        if(clk("Land") && Tardis:tardisInVortex()) 
        {
            Tardis:tardisMaterialise()
        }
    #[ Component Damage and Repair ]#
        function tardisComponents()
        {
            #[ Component Self Repair Systems ]#
            
            if(clk("use")) 
            {
                if(owner():keyUse()) 
                {
                    if(owner():aimEntity() == entity())
                    {
                        if(KeyUse == 0) 
                        {
                            printColor(TardisChatColor,""+TardisName+": Component Repair/Visual Systems On.")
                            KeyUse = 1
                        }
                    }
                }
            }
            if(KeyUse == 1) 
            {
                timer("useOff",500)
            }
            if(clk("useOff")) 
            {
                if(owner():keyUse()) 
                {
                    if(owner():aimEntity() == entity()) 
                    {
                        if(KeyUse == 1) 
                        {
                            KeyUse = 0
                            printColor(TardisChatColor,""+TardisName+": Component Repair/Visual Systems Off.")
                        }
                    }
                }
            }
        
            #[ Component Repairing ]#
            
            if(KeyUse == 1 && Tardis:tardisPowered() == 0) 
            {
                if(Component[1,number] <= 100 && Component[1,number] >= 0) 
                {
                    Fluid_Links += 0.01
                }
                if(Component[2,number] <= 100 && Component[2,number] >= 0) 
                {
                    Manual_Navigations += 0.01
                }
                if(Component[3,number] <= 100 && Component[3,number] >= 0) 
                {
                    Red_Thermocouplings += 0.01
                }
                if(Component[4,number] <= 100 && Component[4,number] >= 0) 
                {
                    Blue_Thermocouplings += 0.01
                }
                if(Component[5,number] <= 100 && Component[5,number] >= 0) 
                {
                    Green_Thermocouplings += 0.01
                }
                if(Component[6,number] <= 100 && Component[6,number] >= 0) 
                { 
                    Chronometric_Astrometer += 0.01
                }
                if(Component[7,number] <= 100 && Component[7,number] >= 0) 
                {
                    Isomorphic_Circuitry += 0.01
                }
                if(Component[8,number] <= 100 && Component[8,number] >= 0) 
                {
                    Chameleon_Circuit += 0.01
                }
                if(Component[9,number] <= 100 && Component[9,number] >= 0) 
                {
                    Artron_Capacitor += 0.01
                }
                if(Component[10,number] <= 100 && Component[10,number] >= 0) 
                {
                    Forcefield_Generator += 0.01
                }
            }
            
#[ Components Wear-and-Tear ]#
        
            #[ Tardis Powered ]#
            
            if(Tardis:tardisPowered()) 
            {
                if(Fluid_Links > 0) 
                {
                    Fluid_Links -= 0.0003
                }
            }
            
            #[ Manual Flight ]#
            
            if(Tardis:tardisFlying()) 
            {
                if(Manual_Navigations > 0) 
                {
                    Manual_Navigations -= 0.001+Speed/150000
    
                }
                if(Fluid_Links > 0) 
                {
                    Fluid_Links -= 0.00017
                }
            }
            
            #[ Dematterialize ]#
            
            if(Tardis:tardisMoving()) 
            {
                if(Red_Thermocouplings > 0) 
                {
                    Red_Thermocouplings -= 0.0004
                }
                if(Fluid_Links > 0) 
                {
                    Fluid_Links -= 0.00052
                }
            }
        
            #[ Vortex Travel ]#
            
            if(Tardis:tardisInVortex()) 
            {
                if(Chronometric_Astrometer > 0) 
                {
                    Chronometric_Astrometer -= 0.00035
                }
                if(Red_Thermocouplings > 0) 
                {
                    Red_Thermocouplings -= 0.005
                }
                if(Fluid_Links > 0) 
                {
                    Fluid_Links -= 0.00047
                }
            }
            
            #[ Isomorphic Circutry ]#
            
            if(Tardis:tardisIsomorphic() || Tardis:tardisLocked()) 
            {
                if(Isomorphic_Circuitry > 0) 
                {
                    Isomorphic_Circuitry -= 0.0001
                }
            }
            
            #[ Chameleon Circut ]#
            
            if(Tardis:tardisVisible() == 0) 
            {
                if(Chameleon_Circuit > 0) 
                {
                    Chameleon_Circuit -= 0.0008
                }
                if(Fluid_Links > 0) 
                {
                    Fluid_Links -= 0.00064
                }
            }
            
            #[ Life-Support ]#
            
            if(Tardis:isValid()) 
            {
                if(Blue_Thermocouplings > 0 && Dist2 < 800 || Dist < 800 || OwnerInteriorDis < 800) 
                {
                    Blue_Thermocouplings -= 0.00015
                }
                if(Green_Thermocouplings > 0 && Dist2 < 800 || Dist < 800 || OwnerInteriorDis < 800) 
                {
                    Green_Thermocouplings -= 0.00012
                }
            }
            
            #[ Component Systems Unoperationable ]#
            
            if(Manual_Navigations <= 1) 
            {
                if(Tardis:tardisFlying()) 
                {
                    Tardis:tardisFlightmode()
                }
            }
                
            if(Red_Thermocouplings <= 1 || Chronometric_Astrometer <= 1) 
            {
                if(Tardis:tardisLongflighted()) 
                {
                    Tardis:tardisLongflight()
                }
            }
            
            if(Chameleon_Circuit <= 1) 
            {
                if(Tardis:tardisVisible() == 0) 
                {
                    Tardis:tardisPhase()
                }
            }
            
            if(Blue_Thermocouplings <= 1 || Green_Thermocouplings <= 1) 
            {
                if(Tardis:tardisPowered()) 
                {
                    Tardis:tardisPower()
                }
            }
        }
tardisComponents()
    }
    
#[ Tardis Spin Switch ]#
    if(Speed >= 1 && Speed < 2000)
    {
        Tardis:tardisSpinmode(1)
    }
    if(Speed > 2000)
    {
        Tardis:tardisSpinmode(-1)
    }

#[ Console Status Screen ]#
    if(clk("Reset"))
    {
        timer("Reset",300)
        Console[2041] = 1
    }
    if(Fuel_Percent > 0 && Booted == 1)
    {
        if(KeyUse == 0) 
        {
            Console:writeString(""+TardisName+"'s Interface",0,0,vec(255,0,0),0,1)
            Console:writeString(">Shields are at "+ShieldPower+"%",0,2,vec(255,0,0),0,0)
            Console:writeString(">Artron levels are at "+Fuel_Percent+"%",0,3,vec(255,0,0),0,0)
            Console:writeString(">Hull integrity at "+Tardis:tardisHealth()+"%",0,4,vec(255,0,0),0,0)
            Console:writeString(">Owner's Health is "+Owner:health()+"%",0,5,vec(255,0,0),0,0)
            Console:writeString(">Current keyboard input: "+Main_Keyboard+"",0,6,vec(255,0,0),0,0)
            Console:writeString(">Current target co-ords:      "+round(Companion:pos())+"",0,8,vec(255,0,0),0,0)
            Console:writeString(">Present temperal co-ords:    "+round(time("year"))+"",0,10,vec(255,0,0),0,0)
            Console:writeString(","+round(time("day"))+"",4,11,vec(255,0,0),0,0)
            Console:writeString(","+round(time("month"))+"",7,11,vec(255,0,0),0,0)
            Console:writeString("Escape Cords:"+EscapeVec,0,12,vec(255,0,0),0,0)
        }
        else
        {
            Console:writeString("Component Status Interface",2,0,vec(255,0,0),67,1)
            Console:writeString(">Fluid Links "+round(Fluid_Links)+"%",0,2,vec(255,0,0),0,0)
            Console:writeString(">Manual Nav. "+round(Manual_Navigations)+"%",0,3,vec(255,0,0),0,0)
            Console:writeString(">Red Thermo. "+round(Red_Thermocouplings)+"%",0,4,vec(255,0,0),0,0)
            Console:writeString(">Blue Thermo. "+round(Blue_Thermocouplings)+"%",0,5,vec(255,0,0),0,0)
            Console:writeString(">Green Thermo. "+round(Green_Thermocouplings)+"%",0,6,vec(255,0,0),0,0)
            Console:writeString(">Chrono. Astro. "+round(Chronometric_Astrometer)+"%",0,7,vec(255,0,0),0,0)
            Console:writeString(">Isomorphic Circuitry "+round(Isomorphic_Circuitry)+"%",0,8,vec(255,0,0),0,0)
            Console:writeString(">Chameleon Circuit "+round(Chameleon_Circuit)+"%",0,9,vec(255,0,0),0,0)
            Console:writeString(">Artron Capacitor "+round(Artron_Capacitor)+"%",0,10,vec(255,0,0),0,0)
            Console:writeString(">Forcefield Generator "+round(Forcefield_Generator)+"%",0,11,vec(255,0,0),0,0)
        }
    }
    elseif(Booted == 1)
    {
        Console:writeString(">----------------------------<",0,7,vec(80,0,0),vec(255,0,0),1)
        Console:writeString(">--------- TARDIS -----------<",0,8,vec(80,0,0),vec(255,0,0),1)
        Console:writeString(">------ FUEL DEPLETED -------<",0,9,vec(80,0,0),vec(255,0,0),1)
        Console:writeString(">----------------------------<",0,10,vec(80,0,0),vec(255,0,0),1)
    }
    else
    {
        Console:writeString(">----------------------------<",0,7,vec(255,255,255),vec(155,155,155),1)
        Console:writeString(">---------- TARDIS ----------<",0,8,vec(255,255,255),vec(155,155,155),1)
        Console:writeString(">-------- BOOTING UP --------<",0,9,vec(255,255,255),vec(155,155,155),1)
        Console:writeString(">----------------------------<",0,10,vec(255,255,255),vec(155,155,155),1)
    }
    
#[ Tardis Interior Sounds (REQUIRES REWRITE OF 2010 TARDIS ADDON) ]#
    if(Tardis:tardisPowered() == 1 && Tardis:tardisSelfrepairing() == 0 && Loop == 1)
    {
        Interior:soundPlay(7,0,"doctorwho1200/copper/rewrite/creaks_loop.wav")
        Interior:soundPlay(8,0,"doctorwho1200/copper/rewrite/interior_idle_loop.wav")
        soundStop(9)
        Loop = 0
    }
    if(Tardis:tardisPowered() == 0 || Tardis:tardisSelfrepairing() == 1)
    {
        soundStop(7)
        soundStop(8)
        Loop = 1
    }
    if(Tardis:tardisSelfrepairing() == 1 || Tardis:tardisPowered() == 0)
    {
        CreakRan = round(random(1,2000))
        if(CreakRan == 10)
        {
            Interior:soundPlay(9,0,"ambient/creak01.wav")
        }
        if(CreakRan == 2)
        {
            Interior:soundPlay(9,0,"ambient/creak02.wav")
        }
        if(CreakRan == 15)
        {
            Interior:soundPlay(9,0,"ambient/creak03.wav")
        }
    }
    if(Tardis:tardisSelfrepairing())
    {
        if(RSLoop == 1)
        {
            Interior:soundPlay(10,0,"doctorwho1200/copper/rewrite/brownlever.wav")
            RSLoop = 0
        }
    }
    else
    {
        RSLoop = 1
    }
} # End Code Mark
