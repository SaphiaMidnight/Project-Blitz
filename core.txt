@name Tardis Personality Core
@model models/spacecode/sfchip.mdl
@inputs [Main_Keyboard Password]:string [FuelBoost]:entity Console:wirelink Targetting
@inputs TardisFlightSpeed
@outputs [Tardis_Code]:string CorePrimed [XYZ TardisChatColor]:vector Fuel_Percent ShieldPower 
@persist [Tardis Owner Interior Companion]:entity [TardisName ArtronFuel ChipActive]:string Dist Damage TardisPhase Phase DoOnce Use Speed AutoLocks
@persist Autospin SkinT DoOnce2 Extrapolator_Shielding ShieldPower Fuel Trans FuelAbsorb Disguise KeyUse Asked Booted
@persist #[Companents]# Chronometric_Astrometer Red_Thermocouplings Manual_Navigations Isomorphic_Circuitry Fluid_Links Chameleon_Circuit 
@persist #[Components]# Blue_Thermocouplings Green_Thermocouplings Artron_Capacitor Forcefield_Generator 
@persist [Version WebVersion MOTD]:string Update NewCode:string VersionInfo:array
@trigger all

#[ Tardis Exterior/Interior and Owner Definitions ]#
Tardis = entity():isConstrainedTo():tardisGet()
Interior = entity():isConstrainedTo()
Owner = Tardis:owner()

#[ Positioning ]#
OwnerInteriorDis = Owner:pos():distance(Interior:pos())
OwnerExteriorDis = Owner:pos():distance(Tardis:pos())
ExteriorDis = Tardis:pos():distance(Interior:pos())
InteriorP = Interior:pos()

#[ Flight Times ]#
TwoMinutes = 120000
FourMinutes = 240000

#[ Toggles Chip ]#
if(Tardis:isValid() & Interior:isValid())
{
    ChipActive = "true"
}
else
{
    printColor(vec(255,0,0), "Chip is not connected to a Tardis, shutting down.")
}

#[ Chip Version ]#
Version = "v5.2"










































































if(ChipActive == "true") 
{
    ArtronFuel = "true"
    interval(60)
    runOnHTTP(1)

    LastSaid=Owner:lastSaid():lower():explode(" ")
    LastSaid1=LastSaid:string(1)

#[ AutoUpdater By: GrimKriegor ]#
    #[ Version Check (SEND REQUEST) ]#
    if(httpCanRequest())
    {
        httpRequest("https://raw.githubusercontent.com/SaphiaMidnight/Project-Blitz/master/Version")
    }

    #[ Version Check ]#
	   if (httpClk() & httpRequestUrl()=="https://raw.githubusercontent.com/SaphiaMidnight/Project-Blitz/master/Version")
    {
        VersionInfo=httpData():trim():explode(";")
    	   WebVersion=VersionInfo:string(1)
        MOTD=VersionInfo:string(2)
    
    	   if (Version!=WebVersion & WebVersion!="")
        {
            timer("versioncheck",7000)
        }
        if (MOTD!="")
        {
            timer("motd",20000)
        }
	   }
    if(clk("versioncheck"))
    {
        hint("Version ["+WebVersion+"] is avaliable on the web!",7) 
        timer("versioncheck2",2000)
    }
    if(clk("versioncheck2"))
    {
        hint("Type /update to update from ["+Version+"] to ["+WebVersion+"]",7)
    }
    if(clk("motd"))
    {
        hint("Message from Sapphie: "+MOTD,7) , entity():soundPlay(1,0,"ui/buttonrollover.wav")
    }
    ## Chat Triggers ---------------------------------------------
    if (chatClk(Owner))
    {

    #Updater & Related --------------------------------------------------
        if (LastSaid1=="/update")
        {
            hideChat(1)
            timer("update",10000)
            hint("Attempting update to version ["+WebVersion+"]",5) 
            entity():soundPlay(1,0,"buttons/button9.wav")
        }
    }
    #Updater Code -----------------------------------------------------------------
    if (clk("update"))
    { 
        if(httpCanRequest())
        {
            httpRequest("https://raw.githubusercontent.com/SaphiaMidnight/Project-Blitz/master/Core.txt")
        }
        else
        {
            hint("ERROR! Can't reach the address!",5) , entity():soundPlay(1,0,"buttons/weapon_cant_buy.wav")
        }
    }

    if (httpClk() & httpRequestUrl()=="https://raw.githubusercontent.com/SaphiaMidnight/Project-Blitz/master/Core.txt")
    {
        NewCode=httpData():trim():explode(VersionInfo:string(3)):string(1)

        if(fileCanWrite() & NewCode!="")
        {
            fileWrite(">e2shared/"+"Tardis_Personality_Core_"+WebVersion+".txt", NewCode)
            hint("The new code was saved on [ e2shared/Tardis_Personality_Core_"+WebVersion+".txt ]",7)
            entity():soundPlay(1,0,"buttons/bell1.wav")
        }
        else
        {
            hint("ERROR! Can't Write the File!",5) , entity():soundPlay(1,0,"buttons/weapon_cant_buy.wav")
        }
    }


#[ Continue Timers ]#

    timer("use", 500)    

#[ Variables ]#
    
    Speed = Tardis:vel():length() 
    MPH = toUnit("mph",Speed)
    Tardis:createWire(entity(),"XYZ","XYZ")
    T = round(random(1,1000))
    Extrapolator_Shielding = 0
    Use = owner():keyUse()
    
#[ Arrays ]#
    
    Component = array(Fluid_Links, Manual_Navigations, Red_Thermocouplings, Blue_Thermocouplings, Green_Thermocouplings, Chronometric_Astrometer, Isomorphic_Circuitry, Chameleon_Circuit, Artron_Capacitor, Forcefield_Generator)
    Players = array(players(), playersAdmins(), playersSuperAdmins())
    Companions = array(Owner:steamFriends())
    Status = array(Tardis:tardisHealth(),Owner:health(),numPlayers(),hostname())
    
#[ Start of the code ]#
    if(first()) 
    {   
        TardisName = "Blitz"
        TardisChatColor = vec(0,208,255)
        TardisFlightSpeed = TwoMinutes
        
        Fluid_Links = 100
        Manual_Navigations = 100
        Red_Thermocouplings = 100
        Blue_Thermocouplings = 100
        Green_Thermocouplings = 100
        Chronometric_Astrometer = 100
        Isomorphic_Circuitry = 100
        Chameleon_Circuit = 100
        Artron_Capacitor = 100
        Forcefield_Generator = 100
        
        Fuel = 100
        AutoLocks = 0
        Asked = 0
        SkinT = 1
        Phase = 0
        KeyUse = 0
        DoOnce = 0
        Tardis_Code = "H5C?W#3E*" #Who knows what this is for? ;)
        ShieldPower = round(255)
        Tardis:setBodygroup(1,1)
        
        timer("Tardis Reboot", 1500)
        setName(""+Owner:name()+"'s Tardis Personallity: "+TardisName+"")
    }

#[ Starting Timers ]#

    if(clk("Tardis Reboot")) 
    {
        printColor(TardisChatColor,""+TardisName+": Rebooting Tardis main systems..")
        Tardis:tardisPower()
        timer("Boot", 4000)
    }
    if(clk("Boot"))
    {
        printColor(TardisChatColor,""+TardisName+": Tardis main systems rebooted.")
        Tardis:tardisPower()
        printColor(TardisChatColor,""+TardisName+": Booting secondary systems and scanning for server name and other players..")
        timer("Secondary", 4000)
        timer("Singleplayer?", 8000)
    }
    if(clk("Secondary"))
    {
        Booted = 1
        printColor(TardisChatColor,""+TardisName+": Tardis secondary systems booted.")
        timer("Holograms", 2000)
        timer("Auto Door Locks?", 10000)
    }
    if(clk("Singleplayer?")) 
    {
        if(isSinglePlayer()) 
        {
            printColor(TardisChatColor,""+TardisName+": So, just me and you then?")
        }
        else
        {
            printColor(TardisChatColor,""+TardisName+": Please keep me safe. Don't do something stupid... or let anyone but your companions touch me.")
            entity():setAlpha(0)
            timer("Server", 3000)
            timer("Others", 6000)
        }
    }
    if(clk("Server")) 
    {
        printColor(TardisChatColor,""+TardisName+": We are in the "+Status[4,string]+" server.")
    }
    if(clk("Others"))
    {
        printColor(TardisChatColor,""+TardisName+": And, my scanners detect "+Status[3,number]+" other players in this server.")
    }
    if(clk("Auto Door Locks?")) 
    {
        printColor(TardisChatColor,""+TardisName+": Also, would you like to activate auto door locking? (primary fire = yes/secondary = no)")
        Asked = 1
    }
#[ Auto Locking Answer ]#

    if(Asked == 1)
    {
        if(Owner:keyAttack1())
        {
            AutoLocks = 1
            printColor(TardisChatColor,""+TardisName+": Aright, door auto lock enabled.")
            Asked = 0
        }
        if(Owner:keyAttack2())
        {
            AutoLocks = 0
            printColor(TardisChatColor,""+TardisName+": Aright, door auto lock disabled. Manual control only.")
            Asked = 0
        }
    }
    
#[ Holograms ]#
    
    if(clk("Holograms")) 
    {
        printColor(TardisChatColor,""+TardisName+": Activating Holographic Systems Status.")
#[ Tardis Shield ]#
        holoCreate(1)
        holoModel(1,"hq_icosphere")
        holoPos(1,Interior:toWorld(vec(-26,42,21.5)))
        holoAng(1,ang(0,0,0))
        holoScale(1,vec(0.9,0.9,0.9))
        
#[ Tardis Status Exterior ]#
        holoCreate(2)
        holoModel(2,"models/drmatt/tardis/exterior.mdl")
        holoParent(2,Interior)
        holoBodygroup(2,1,1)
        holoPos(2,Interior:toWorld(vec(-26,42,17.5)))
        holoScale(2,vec(0.071,0.071,0.071))
     
#[ Holographic Security ]#
        holoCreate(3)
        holoModel(3,Owner:model())
        holoAlpha(3,0)
        holoPos(3,Interior:pos()-vec(-60,-80,47))
        holoAng(3,ang(0,52,0))
    
#[ Tardis Demat Phase ]#
        holoCreate(4)
        holoModel(4,"models/drmatt/tardis/exterior.mdl")
        holoPos(4,Interior:toWorld(vec(-26,42,9)))
        holoAng(4,ang(0,120,0))
        holoScale(4,vec(0.07,0.07,0.07))
        holoBodygroup(4,2,1)
        holoBodygroup(4,1,1)
        
#[ Tardis Status Background ]#
        holoCreate(5)
        holoModel(5,"models/drmatt/tardis/exterior.mdl")
        holoPos(5,Interior:toWorld(vec(-26,42,17.5)))
        holoMaterial(5,"phoenix_storms/fender_white")
        holoScale(5,vec(0.07,0.07,0.07))
    }

    if(Booted == 1)
    {
    #[ Tardis Auto lock & Tardis Auto Isomorphics ]#
        
        if(Tardis:tardisMoving() || Tardis:tardisFlying()) 
        {
            if(Tardis:tardisLocked() == 0 && AutoLocks == 1) 
            {
                Tardis:tardisLock()
            }
        }
        
        if(Status[3,number] > 1 && Owner:pos():distance(Interior:pos()) > 800) 
        {
            if(Tardis:tardisIsomorph() == 0) 
            {
                Tardis:tardisIsomorphic()
            }
        }
        
    #[ Tardis Keys ]#
        
        if(clk("use"))
        {
            if(owner():keyUse())
            {
                if(owner():aimEntity() == Tardis && Owner:pos():distance(Tardis:pos()) < 68)
                {
                    if(Tardis:tardisLocked())
                    {
                        timer("Insert key",1000)
                    }
                }
            }
        }
        
        if(clk("Insert key"))
        {
            Tardis:soundPlay(1.5,2849,"weapons/ar2/npc_ar2_reload.wav")
            timer("Key unlock",2850)
        }
        if(clk("Key unlock"))
        {
            printColor(TardisChatColor,""+TardisName+": Doors unlocked using key.")
            Tardis:tardisLock()
        }
            
    #[ Fueling System ]#
        
        function artron() 
        {
            Fuel_Percent = round(Fuel)
            if(Fuel > 0) 
            {
            
                if(Tardis:tardisPowered()) 
                {
                    Fuel -= 0.0001
                    Artron_Capacitor -= 0.0001
                }
                if(Tardis:tardisInVortex() && Tardis:tardisMoving()) 
                {
                    Fuel -= 0.0025
                    Artron_Capacitor -= 0.0055
                }
                if(Tardis:tardisMoving() && Tardis:tardisLongflighted()==0) 
                {
                    Fuel -= 0.0015
                    Artron_Capacitor -= 0.004
                }
                if(Tardis:tardisVisible()==0 && Tardis:tardisPowered()) 
                {
                    Fuel -= 0.0040
                    Artron_Capacitor -= 0.006
                }
                if(Tardis:tardisFlying() && Tardis:tardisPowered()) 
                {
                    Fuel -= 0.0010
                    Artron_Capacitor -= 0.002
                }
                if(Tardis:tardisPowered()==0 && Fuel < 100 && Tardis:tardisIsHADS() && Artron_Capacitor > 0) 
                {
                    Fuel += 0.020
                    Artron_Capacitor -= 0.003
                }
            }
                        
            if(Fuel_Percent == 0 || Artron_Capacitor <= 1 && Tardis:tardisPowered()) 
            {
                Tardis:tardisPower()
            }
            if(Fuel_Percent == 0 && Tardis:tardisInVortex() && Extrapolator_Shielding == 1) 
            {
                printColor(TardisChatColor,""+TardisName+": Artron fuel banks are empty! Shields have failed!")
                Extrapolator_Shielding = 0           
            }
            elseif(Forcefield_Generator <= 1) 
            {
                Extrapolator_Shielding = 0
            }
        
            if(Fuel_Percent >= 99 && Tardis:tardisPowered() == 0 && ShieldPower < 255 && Forcefield_Generator > 0) 
            {
                ShieldPower += 1
            }
            if(Fuel_Percent < 100 && FuelBoost:isValid() && Tardis:tardisIsHADS() && Tardis:tardisPowered() == 0) 
            {
                FuelAbsorb -= 2
                FuelBoost:setAlpha(FuelAbsorb)
                Fuel += 0.1
            }
            if(FuelAbsorb <= 1) 
            {
                FuelBoost:propDelete()
                FuelAbsorb = 255
            }
        }
        
        if(ArtronFuel == "true") 
        {
            artron()
        }
        
    #[ Hitting Debris ]#
        
        if(ShieldPower > 0 && Fuel > 0 && Forcefield_Generator > 0) 
        {
            Extrapolator_Shielding = 1
        }
        else
        {
            Extrapolator_Shielding = 0
        }
        
        if(T == 24) 
        {
            if(Tardis:tardisInVortex() == 1) 
            {
                if(Extrapolator_Shielding == 1) 
                {
                    soundPlay(1,10,"stargate/iris/hit.mp3")
                    Forcefield_Generator -= 0.001
                    ShieldPower-=1
                }
            }
        }
        if(T == 25) 
        { 
            if(Tardis:tardisInVortex() == 1) 
            {
                if(Extrapolator_Shielding == 0) 
                {
                    Debris = propSpawn("models/props_c17/oildrum001_explosive.mdl",Interior:pos()+vec(0,0,150),ang(0,0,0),1)
                    Debris:setAlpha(0)
                    Debris:propBreak()
                    printColor(TardisChatColor,""+TardisName+": Small Debris Impact, hull taking light Damage!")
                }
            }
        }
        if(T == 26) 
        {
            if(Tardis:tardisInVortex() == 1) 
            {
                if(Extrapolator_Shielding == 1) 
                {
                    soundPlay(2,10,"stargate/iris/hit_2.mp3")
                    Forcefield_Generator -= 0.003
                    ShieldPower-=2
                }
            }
        }
        if(T == 27) 
        { 
            if(Tardis:tardisInVortex() == 1) 
            {
                if(Extrapolator_Shielding == 0) 
                {
                    Debris = propSpawn("models/props_c17/oildrum001_explosive.mdl",Interior:pos()+vec(0,0,150),ang(0,0,0),1)
                    Debris:setAlpha(0)
                    Debris:propBreak()
                    printColor(TardisChatColor,""+TardisName+": Small Debris Impact, hull taking light Damage!")
                }
            }
        }
        if(T == 28) 
        {
            if(Tardis:tardisInVortex() == 1) 
            {
                if(Extrapolator_Shielding == 1) 
                {
                    soundPlay(3,10,"stargate/iris/hit_3.mp3")
                    Forcefield_Generator -= 0.004
                    ShieldPower-=2
                }
            }
        }
        if(T == 29) 
        { 
            if(Tardis:tardisInVortex() == 1) 
            {
                if(Extrapolator_Shielding == 0) 
                {
                    Debris = propSpawn("models/props_c17/oildrum001_explosive.mdl",Interior:pos()+vec(0,0,150),ang(0,0,0),1)
                    Debris:setAlpha(0)
                    Debris:propBreak()
                    printColor(TardisChatColor,""+TardisName+": Small/Fast Debris Impact, hull taking some Damage!")
                }
            }
        }
        if(T == 30) 
        {
            if(Tardis:tardisInVortex() == 1) 
            {
                if(Extrapolator_Shielding == 1) 
                {
                    soundPlay(4,10,"stargate/iris/hit_4.mp3")
                    Forcefield_Generator -= 0.006
                    ShieldPower-=4
                }
            }
        }
        if(T == 31) 
        { 
            if(Tardis:tardisInVortex() == 1) 
            {
                if(Extrapolator_Shielding == 0) 
                {
                    Debris = propSpawn("models/props_c17/oildrum001_explosive.mdl",Interior:pos()+vec(0,0,150),ang(0,0,0),1)
                    Debris2 = propSpawn("models/props_c17/oildrum001_explosive.mdl",Interior:pos()+vec(0,0,100),ang(0,0,0),1)
                    Debris3 = propSpawn("models/props_c17/oildrum001_explosive.mdl",Interior:pos()+vec(0,0,50),ang(0,0,0),1)
                    
                    Debris:setAlpha(0)
                    Debris2:setAlpha(0)
                    Debris2:setAlpha(0)
                    
                    Debris:propBreak()
                    Debris2:propBreak()
                    Debris3:propBreak()
                    printColor(TardisChatColor,""+TardisName+": Large Debris Impact, hull taking severe Damage!")
                }
            }
        }
        
    #[ Tardis extra damage effects ]#
        
        if(T == 100) 
        {
            if(Status[1,number] < 1) 
            {
                Debris4 = propSpawn("models/props_junk/propane_tank001a.mdl",Interior:pos()+vec(0,0,0),ang(0,0,0),1)
                Debris4:setAlpha(0)
                Debris4:propBreak()
            }
        }
        
        if(T == 101) 
        {
            if(Status[1,number] < 1) 
            {
                Debris4 = propSpawn("models/props_junk/propane_tank001a.mdl",Interior:pos()+vec(0,0,0),ang(0,0,0),1)
                Debris4:setAlpha(0)
                Debris4:propBreak()
            }
        }
        
    #[ Tardis Status Holo ]#
        
        if(Status[1,number] > 50 && Tardis:tardisHealth() < 101)
        {
            holoColor(2,vec(21,255,14))
            holoAlpha(2,170)
        }
        elseif(Status[1,number] > 20 && Tardis:tardisHealth() < 51)
        {
            holoColor(2,vec(255,150,0))
            holoAlpha(2,170)
        }
        elseif(Status[1,number] < 21 && Tardis:tardisHealth() > 0)
        {
            holoColor(2,vec(255,0,0))
            holoAlpha(2,170)
        }
        elseif(Status[1,number] == 0)
        {
            holoColor(2,vec(random(100,250),random(0,10),random(12,22)))
            holoAlpha(2,random(10,200))
        }
        
        if(Fuel_Percent > 50 && Fuel_Percent < 101)
        {
            holoColor(5,vec(21,255,14))
        }
        elseif(Fuel_Percent > 20 && Fuel_Percent < 51)
        {
            holoColor(5,vec(255,150,0))
        }
        elseif(Fuel_Percent < 21 && Fuel_Percent > 0)
        {
            holoColor(5,vec(255,0,0))
        }
        elseif(Fuel_Percent == 0)
        {
            holoColor(5,vec(random(100,250),random(0,10),random(12,22)))
        }
        
        if(Tardis:tardisMoving() == 1) 
        {
            if(Tardis:tardisInVortex() == 0) 
            {
                holoAlpha(1,30)
            }
        }
        
        if(Tardis:tardisInVortex() && Extrapolator_Shielding == 1) 
        {
            holoAlpha(1,ShieldPower)
        }
        
        if(Tardis:tardisInVortex() == 0 && Tardis:tardisMoving() == 0) 
        {
            holoAlpha(1,0)
        }
    #[ Shield Hologram ]#
        
        if(Extrapolator_Shielding == 1) 
        {
            holoColor(1,vec(65,206,255))
        }
        else
        {
            holoAlpha(1,0)
        }
        
    #[ Tardis HoloStatus ]#
        
        holoAng(2,Tardis:angles())
        holoSkin(2,Tardis:getSkin())
        
        if(Tardis:tardisPowered() == 1) 
        {
            holoBodygroup(2,2,1)
        }
        if(Tardis:tardisPowered() == 0) 
        {
            holoBodygroup(2,2,0)
        }
        
    #[ Interior Landing & No Pilot Landing ]#
        
        if(Tardis:tardisInVortex() && OwnerInteriorDis > 800) 
        {
            timer("No Pilot",15000)
        }
        else
        {
            stoptimer("No Pilot")
        }
        
        if(clk("No Pilot")) 
        {
            Tardis:tardisMaterialise()
        }
        
        if(ExteriorDis > 800 && Main_Keyboard=="Amy Pond" && Tardis:tardisIsHADS() && Tardis:tardisPhyslocked() && Tardis:tardisPowered()) 
        { 
            if(Tardis:tardisMoving() == 0 && Tardis:tardisLongflighted() == 0 && Tardis:tardisIsomorphic() && Tardis:tardisLocked()) 
            {
                Tardis:tardisDemat(InteriorP+vec(340,200,-75),ang(0,180,0))
                printColor(TardisChatColor,""+TardisName+": Navigations Error, relocating to safest place!")
            }
        }
        
        if(Main_Keyboard=="Wibbly Lever" && Tardis:tardisPhyslocked() && Tardis:tardisPowered() && Tardis:tardisMoving() && ExteriorDis < 800) 
        {
            printColor(TardisChatColor,""+TardisName+": As the Doctor said, The Wibbly Lever!")
            Tardis:tardisFastReturn()
        }
        
    #[ Exterior Cloister ]#
        
        findByClass("player")
        findExcludePlayer(Owner)
        findExcludeEntity(Companion)
        Player = findResult(1)
        
        Dist2 = Player:pos():distance(Tardis:pos())
        
        if(Dist2 < 1000)
        {
            if(Status[1,number] <= 20)
            {
                if(DoOnce2==0)
                {
                    timer("cloister",0)
                    DoOnce2=1
                }
            }
            elseif(Status[1,number] > 20)
            {
                soundStop(5)
                DoOnce2=0
            }
        }
        elseif(Dist2 > 1500)
        {
            if(Status[1,number] <= 20)
            {
                DoOnce2=0
                soundStop(5)
            }
        }
        
        if(clk("cloister"))
        {
            Tardis:soundPlay(5,100,"tardis/cloisterbell_loop.wav")
        }
        else
        {
            soundStop(5)
        }
        
    #[ Companion Retrival ]#
        if(isSinglePlayer() == 0)
        {
            findByClass("player")
            findPlayerByName(""+Main_Keyboard+"")
            findExcludePlayer(Owner)
            
            Target = find()
            
            if(Targetting == 1 && Tardis:tardisMoving() == 0 && Tardis:tardisPhyslocked() && Tardis:tardisPowered()) 
            {
                if(Target:isValid() && Target:isAlive() && Target:pos():isInWorld()) 
                {
                    Tardis:tardisDemat(Target:pos()+vec(0,200,0),ang(0,180,0))
                }
            }
        
        #[ Tardis Friends ]#
    
            findInSphere(Tardis:pos(),5000000) 
            findSortByDistance(Tardis:pos())                      
            findIncludeClass("player")                
            findExcludePlayer(Owner)      
                 
            Companion = find()                                
            
            Dist = Companion:pos():distance(Tardis:pos())
            
            if(Tardis:tardisMoving() == 0 && Tardis:tardisFlying() == 0 && Dist < 400 && Companion:isSteamFriend(Owner) && Tardis:tardisLocked()) 
            {
                Tardis:tardisLock()
            }
        }
        
    #[ Random Skin Upon Auto-Repair ]#
        
        if(Tardis:tardisSelfrepairing()) 
        {
            SkinT = round(random(0,3))
        }
        if(Tardis:tardisSelfrepairing() == 0) 
        {
            if(SkinT == 0) 
            {
                Tardis:setSkin(0)
            }
        }
        if(Tardis:tardisSelfrepairing() == 0) 
        {
            if(SkinT == 1) 
            {
                Tardis:setSkin(1)
            }
        }
        if(Tardis:tardisSelfrepairing() == 0) 
        {
            if(SkinT == 2) 
            {
                Tardis:setSkin(2)
            }
        }
        if(Tardis:tardisSelfrepairing() == 0) 
        {
            if(SkinT == 3) 
            {
                Tardis:setSkin(3)
            }
        }
        
    #[ Power lit sign ]#
        
        if(Tardis:tardisPowered()) 
        {
            Tardis:setBodygroup(2,1)
        }
        
        if(Tardis:tardisPowered() == 0) 
        {
            Tardis:setBodygroup(2,0)
        }
        
    #[ Owner Hologram ]#
        
        if(OwnerInteriorDis > 800) 
        {
            holoAlpha(3,200)
        }
        else
        {
            holoAlpha(3,0)
        }
        
    #[ Tardis Materialize Stuff ]#
        
        holoSkin(4,Tardis:getSkin())
        holoAng(5,Tardis:angles())
        
        if(Tardis:tardisVisible() == 0 && Tardis:tardisMoving() == 0) 
        {
            holoAlpha(4,30)
        }
        else
        {
            holoAlpha(4,255)
        }
        
        if(Tardis:tardisMoving()) 
        {
            holoAlpha(4,Tardis:getAlpha())
        }
    
    #[ Curiosity Circuts ]#
            
        if(Tardis:tardisInVortex()) 
        {
            timer("Land",TardisFlightSpeed)
        }
        else
        {
            stoptimer("Land")
        }
        
        if(clk("Land") && Tardis:tardisInVortex()) 
        {
            Tardis:tardisMaterialise()
        }
        
    
    #[ Component Damage and Repair ]#
        function taridsComponents()
        {
            #[ Component Self Repair Systems ]#
            
            if(clk("use")) 
            {
                if(owner():keyUse()) 
                {
                    if(owner():aimEntity() == entity())
                    {
                        if(KeyUse == 0) 
                        {
                            printColor(TardisChatColor,""+TardisName+": Component Repair Systems On.")
                            KeyUse = 1
                        }
                    }
                }
            }
            if(KeyUse == 1) 
            {
                timer("useOff",500)
            }
            if(clk("useOff")) 
            {
                if(owner():keyUse()) 
                {
                    if(owner():aimEntity() == entity()) 
                    {
                        if(KeyUse == 1) 
                        {
                            KeyUse = 0
                            printColor(TardisChatColor,""+TardisName+": Component Repair Systems Off.")
                        }
                    }
                }
            }
        
            #[ Component Repairing ]#
            
            if(KeyUse == 1) 
            {
                if(Component[1,number] <= 100 && Component[1,number] >= 0) 
                {
                    Fluid_Links += 0.01
                }
                if(Component[2,number] <= 100 && Component[2,number] >= 0) 
                {
                    Manual_Navigations += 0.01
                }
                if(Component[3,number] <= 100 && Component[3,number] >= 0) 
                {
                    Red_Thermocouplings += 0.01
                }
                if(Component[4,number] <= 100 && Component[4,number] >= 0) 
                {
                    Blue_Thermocouplings += 0.01
                }
                if(Component[5,number] <= 100 && Component[5,number] >= 0) 
                {
                    Green_Thermocouplings += 0.01
                }
                if(Component[6,number] <= 100 && Component[6,number] >= 0) 
                { 
                    Chronometric_Astrometer += 0.01
                }
                if(Component[7,number] <= 100 && Component[7,number] >= 0) 
                {
                    Isomorphic_Circuitry += 0.01
                }
                if(Component[8,number] <= 100 && Component[8,number] >= 0) 
                {
                    Chameleon_Circuit += 0.01
                }
                if(Component[9,number] <= 100 && Component[9,number] >= 0) 
                {
                    Artron_Capacitor += 0.01
                }
                if(Component[10,number] <= 100 && Component[10,number] >= 0) 
                {
                    Forcefield_Generator += 0.01
                }
            }
            
#[ Components Wear-and-Tear ]#
        
#[ Tardis Powered ]#
            
            if(Tardis:tardisPowered()) 
            {
                if(Fluid_Links > 0) 
                {
                    Fluid_Links -= 0.0003
                }
            }
            
            #[ Manual Flight ]#
            
            if(Tardis:tardisFlying()) 
            {
                if(Manual_Navigations > 0) 
                {
                    Manual_Navigations -= 0.001+Speed/150000
    
                }
                if(Fluid_Links > 0) 
                {
                    Fluid_Links -= 0.00017
                }
            }
            
            #[ Dematterialize ]#
            
            if(Tardis:tardisMoving()) 
            {
                if(Red_Thermocouplings > 0) 
                {
                    Red_Thermocouplings -= 0.0004
                }
                if(Fluid_Links > 0) 
                {
                    Fluid_Links -= 0.00052
                }
            }
        
            #[ Vortex Travel ]#
            
            if(Tardis:tardisInVortex()) 
            {
                if(Chronometric_Astrometer > 0) 
                {
                    Chronometric_Astrometer -= 0.00035
                }
                if(Red_Thermocouplings > 0) 
                {
                    Red_Thermocouplings -= 0.005
                }
                if(Fluid_Links > 0) 
                {
                    Fluid_Links -= 0.00047
                }
            }
            
            #[ Isomorphic Circutry ]#
            
            if(Tardis:tardisIsomorphic() || Tardis:tardisLocked()) 
            {
                if(Isomorphic_Circuitry > 0) 
                {
                    Isomorphic_Circuitry -= 0.0001
                }
            }
            
            #[ Chameleon Circut ]#
            
            if(Tardis:tardisVisible() == 0) 
            {
                if(Chameleon_Circuit > 0) 
                {
                    Chameleon_Circuit -= 0.0008
                }
                if(Fluid_Links > 0) 
                {
                    Fluid_Links -= 0.00064
                }
            }
            
            #[ Life-Support ]#
            
            if(Tardis:isValid()) 
            {
                if(Blue_Thermocouplings > 0 && Dist2 < 800 || Dist < 800 || OwnerInteriorDis < 800) 
                {
                    Blue_Thermocouplings -= 0.00015
                }
                if(Green_Thermocouplings > 0 && Dist2 < 800 || Dist < 800 || OwnerInteriorDis < 800) 
                {
                    Green_Thermocouplings -= 0.00012
                }
            }
            
            #[ Component Systems Unoperationable ]#
            
            if(Manual_Navigations <= 1) 
            {
                if(Tardis:tardisFlying()) 
                {
                    Tardis:tardisFlightmode()
                }
            }
                
            if(Red_Thermocouplings <= 1 || Chronometric_Astrometer <= 1) 
            {
                if(Tardis:tardisLongflighted()) 
                {
                    Tardis:tardisLongflight()
                }
            }
            
            if(Chameleon_Circuit <= 1) 
            {
                if(Tardis:tardisVisible() == 0) 
                {
                    Tardis:tardisPhase()
                }
            }
            
            if(Blue_Thermocouplings <= 1 || Green_Thermocouplings <= 1) 
            {
                if(Tardis:tardisPowered()) 
                {
                    Tardis:tardisPower()
                }
            }
        }
    }

#[ Console Status Screen ]#
    
    if(KeyUse == 0) 
    {
        Console:writeString(""+TardisName+"'s Interface",5,0,25,67,1)
        Console:writeString(">Shields are at "+ShieldPower+"%",0,2,25,0,0)
        Console:writeString(">Artron levels are at "+Fuel_Percent+"%",0,3,25,0,0)
        Console:writeString(">Hull integrity at "+Tardis:tardisHealth()+"%",0,4,25,0,0)
        Console:writeString(">Owner's Health is "+Owner:health()+"%",0,5,25,0,0)
        Console:writeString(">Current keyboard input: "+Main_Keyboard+"",0,6,25,0,0)
        Console:writeString(">Current target co-ords:      "+round(Companion:pos())+"",0,8,24,0,0)
        Console:writeString(">Present temperal co-ords:    "+round(time("year"))+"",0,10,25,0,0)
        Console:writeString(", "+round(time("day"))+"",4,11,25,0,0)
        Console:writeString(", "+round(time("month"))+"",7,11,25,0,0)
    }
    else
    {
        Console:writeString("Component Status Interface",2,0,25,67,1)
        Console:writeString(">Fluid Links "+round(Fluid_Links)+"%",0,2,25,0,0)
        Console:writeString(">Manual Nav. "+round(Manual_Navigations)+"%",0,3,25,0,0)
        Console:writeString(">Red Thermo. "+round(Red_Thermocouplings)+"%",0,4,25,0,0)
        Console:writeString(">Blue Thermo. "+round(Blue_Thermocouplings)+"%",0,5,25,0,0)
        Console:writeString(">Green Thermo. "+round(Green_Thermocouplings)+"%",0,6,25,0,0)
        Console:writeString(">Chrono. Astro. "+round(Chronometric_Astrometer)+"%",0,7,25,0,0)
        Console:writeString(">Isomorphic Circuitry "+round(Isomorphic_Circuitry)+"%",0,8,25,0,0)
        Console:writeString(">Chameleon Circuit "+round(Chameleon_Circuit)+"%",0,9,25,0,0)
        Console:writeString(">Artron Capacitor "+round(Artron_Capacitor)+"%",0,10,25,0,0)
        Console:writeString(">Forcefield Generator "+round(Forcefield_Generator)+"%",0,11,25,0,0)
    }

#[ Holograms Visablility ]#
    
    if(Player:pos():distance(Interior:pos()) < 800) 
    {
        holoVisible(1,Player,1)
        holoVisible(2,Player,1)
        holoVisible(3,Player,1)
        holoVisible(4,Player,1)
        holoVisible(5,Player,1)
        holoVisible(6,Player,1)
        holoVisible(7,Player,1)
        holoVisible(8,Player,1)
        holoVisible(9,Player,1)
        holoVisible(10,Player,1)
        holoVisible(11,Player,1)
        holoVisible(12,Player,1)
        holoVisible(13,Player,1)
        holoVisible(14,Player,1)
        holoVisible(15,Player,1)
        holoVisible(16,Player,1)
        holoVisible(17,Player,1)
        holoVisible(18,Player,1)
        holoVisible(19,Player,1)
        holoVisible(20,Player,1)
        holoVisible(21,Player,1)
        holoVisible(22,Player,1)
        holoVisible(23,Player,1)
        holoVisible(24,Player,1)
        holoVisible(25,Player,1)
        holoVisible(26,Player,1)
        holoVisible(27,Player,1)
        holoVisible(28,Player,1)
        holoVisible(29,Player,1)
        holoVisible(30,Player,1)
    }
    else
    {
        holoVisible(1,Player,0)
        holoVisible(2,Player,0)
        holoVisible(3,Player,0)
        holoVisible(4,Player,0)
        holoVisible(5,Player,0)
        holoVisible(6,Player,0)
        holoVisible(7,Player,0)
        holoVisible(8,Player,0)
        holoVisible(9,Player,0)
        holoVisible(10,Player,0)
        holoVisible(11,Player,0)
        holoVisible(12,Player,0)
        holoVisible(13,Player,0)
        holoVisible(14,Player,0)
        holoVisible(15,Player,0)
        holoVisible(16,Player,0)
        holoVisible(17,Player,0)
        holoVisible(18,Player,0)
        holoVisible(19,Player,0)
        holoVisible(20,Player,0)
        holoVisible(21,Player,0)
        holoVisible(22,Player,0)
        holoVisible(23,Player,0)
        holoVisible(24,Player,0)
        holoVisible(25,Player,0)
        holoVisible(26,Player,0)
        holoVisible(27,Player,0)
        holoVisible(28,Player,0)
        holoVisible(29,Player,0)
        holoVisible(30,Player,0)
    }
    
    if(Companion:pos():distance(Interior:pos()) < 800) 
    {
        holoVisible(1,Companion,1)
        holoVisible(2,Companion,1)
        holoVisible(3,Companion,1)
        holoVisible(4,Companion,1)
        holoVisible(5,Companion,1)
        holoVisible(6,Companion,1)
        holoVisible(7,Companion,1)
        holoVisible(8,Companion,1)
        holoVisible(9,Companion,1)
        holoVisible(10,Companion,1)
        holoVisible(11,Companion,1)
        holoVisible(12,Companion,1)
        holoVisible(13,Companion,1)
        holoVisible(14,Companion,1)
        holoVisible(15,Companion,1)
        holoVisible(16,Companion,1)
        holoVisible(17,Companion,1)
        holoVisible(18,Companion,1)
        holoVisible(19,Companion,1)
        holoVisible(20,Companion,1)
        holoVisible(21,Companion,1)
        holoVisible(22,Companion,1)
        holoVisible(23,Companion,1)
        holoVisible(24,Companion,1)
        holoVisible(25,Companion,1)
        holoVisible(26,Companion,1)
        holoVisible(27,Companion,1)
        holoVisible(28,Companion,1)
        holoVisible(29,Companion,1)
        holoVisible(30,Companion,1)
    }
    else
    {
        holoVisible(1,Companion,0)
        holoVisible(2,Companion,0)
        holoVisible(3,Companion,0)
        holoVisible(4,Companion,0)
        holoVisible(5,Companion,0)
        holoVisible(6,Companion,0)
        holoVisible(7,Companion,0)
        holoVisible(8,Companion,0)
        holoVisible(9,Companion,0)
        holoVisible(10,Companion,0)
        holoVisible(11,Companion,0)
        holoVisible(12,Companion,0)
        holoVisible(13,Companion,0)
        holoVisible(14,Companion,0)
        holoVisible(15,Companion,0)
        holoVisible(16,Companion,0)
        holoVisible(17,Companion,0)
        holoVisible(18,Companion,0)
        holoVisible(19,Companion,0)
        holoVisible(20,Companion,0)
        holoVisible(21,Companion,0)
        holoVisible(22,Companion,0)
        holoVisible(23,Companion,0)
        holoVisible(24,Companion,0)
        holoVisible(25,Companion,0)
        holoVisible(26,Companion,0)
        holoVisible(27,Companion,0)
        holoVisible(28,Companion,0)
        holoVisible(29,Companion,0)
        holoVisible(30,Companion,0)
    }
    
    if(Owner:pos():distance(Interior:pos()) < 800) 
    {
        holoVisible(1,Owner,1)
        holoVisible(2,Owner,1)
        holoVisible(3,Owner,1)
        holoVisible(4,Owner,1)
        holoVisible(5,Owner,1)
        holoVisible(6,Owner,1)
        holoVisible(7,Owner,1)
        holoVisible(8,Owner,1)
        holoVisible(9,Owner,1)
        holoVisible(10,Owner,1)
        holoVisible(11,Owner,1)
        holoVisible(12,Owner,1)
        holoVisible(13,Owner,1)
        holoVisible(14,Owner,1)
        holoVisible(15,Owner,1)
        holoVisible(16,Owner,1)
        holoVisible(17,Owner,1)
        holoVisible(18,Owner,1)
        holoVisible(19,Owner,1)
        holoVisible(20,Owner,1)
        holoVisible(21,Owner,1)
        holoVisible(22,Owner,1)
        holoVisible(23,Owner,1)
        holoVisible(24,Owner,1)
        holoVisible(25,Owner,1)
        holoVisible(26,Owner,1)
        holoVisible(27,Owner,1)
        holoVisible(28,Owner,1)
        holoVisible(29,Owner,1)
        holoVisible(30,Owner,1)
    }
    else
    {
        holoVisible(1,Owner,0)
        holoVisible(2,Owner,0)
        holoVisible(3,Owner,0)
        holoVisible(4,Owner,0)
        holoVisible(5,Owner,0)
        holoVisible(6,Owner,0)
        holoVisible(7,Owner,0)
        holoVisible(8,Owner,0)
        holoVisible(9,Owner,0)
        holoVisible(10,Owner,0)
        holoVisible(11,Owner,0)
        holoVisible(12,Owner,0)
        holoVisible(13,Owner,0)
        holoVisible(14,Owner,0)
        holoVisible(15,Owner,0)
        holoVisible(16,Owner,0)
        holoVisible(17,Owner,0)
        holoVisible(18,Owner,0)
        holoVisible(19,Owner,0)
        holoVisible(20,Owner,0)
        holoVisible(21,Owner,0)
        holoVisible(22,Owner,0)
        holoVisible(23,Owner,0)
        holoVisible(24,Owner,0)
        holoVisible(25,Owner,0)
        holoVisible(26,Owner,0)
        holoVisible(27,Owner,0)
        holoVisible(28,Owner,0)
        holoVisible(29,Owner,0)
        holoVisible(30,Owner,0)
    }
} # End Code Mark
